// Generate the all primes <= n
// Time complexity: O(nlog(logn))

// Check if n is a prime in O(sqrt(n))
bool prime_check(int n) { 
    if (n < 2) return false;
    for (int i = 2; i * i <= n; i++)
        if (n % i == 0)
            return false;
    return true;
}

void sieve() {
    //declare is_prime as global bool vector
    is_prime[0]=is_prime[1]=false;
    for (int i = 2; i * i <= MAX_N; i++){
        if (is_prime[i]){
            for (int j = i * i; j <= MAX_N; j += i)
                is_prime[j] = false;
        }
    }
}

// Generate the all primes <=n and store in a vector in O(nlog(logn))
vector<int> sieve(int n) {
    vector<int> primes, is_prime(n + 1, 1);
    for (int i = 2; i * i <= n; i++)
        if (is_prime[i])
            for (int j = i*i; j <= n; j += i)
                is_prime[j] = 0;
    for (int i = 2; i <= n; i++)
        if (is_prime[i])
            primes.push_back(i);
    return primes;
}

//prime factorization in O(log n)
void sieve(){ 
    for(int i=1;i<=MAX_N;i++)
        arr[i]=-1;

    for(int i=2;i<=MAX_N;i++){
        if(arr[i]==-1){
            for(int j=i;j<=MAX_N;j+=i){
                if(arr[j]==-1)
                    arr[j]=i;
            }
        }
    }
}
//print prime factors
//    int n;cin>>n;
//    while(n>1){
//        cout<<arr[n]<<" ";
//        n=n/arr[n];
//    }
