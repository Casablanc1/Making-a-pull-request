void lcs(string a,string b){
    int n=a.size(),m=b.size();
    int dp[n+1][m+1];
    //calculate LCS
    //intialize base condition i.e if n==0 || m==0 ans =0
    for(int i=0;i<n+1;i++){dp[i][0]=0;}
    for(int j=0;j<m+1;j++){dp[0][j]=0;}

    //dp logic
    //everything same as recursion logic just we run 2 loops for both strings 
    for(int i=1;i<n+1;i++){
        for(int j=1;j<m+1;j++){
            if(a[i-1]==b[j-1])
                dp[i][j]=1+dp[i-1][j-1];  //we reduce both strings by 1 size hence find answer for subproblem with string size-1 

            else 
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);  //we reduce any one of them by 1 size and keep other same 
        } 
    }
    cout<<dp[n][m]<<"\n";

    //Print LCS
    //we have to now print the lcs ,so we start from end of both strings and loop till any one string becomes empty 
    //and if the characters of strings are equal we store it in string s else we go to the max size of previous lcs subproblem i.e reduce any one string by -1
    int i=n,j=m;
    string s="";
    while(i>0 && j>0){
        if(a[i-1]==b[j-1]){
            s+=a[i-1];
            i--;j--;  //here we decreament both by 1 as they are equal 
        }
        else{
            //here we move to the max value of previous lcs subproblem cause we reached the current subproblem frm=om the max value
            if(dp[i-1][j]>dp[i][j-1])
                i--;
            else
                j--;
        }
    }
    reverse(s.begin(),s.end());  //we have to reverse the string because we are storing the subsequence from the end
    cout<<s<<"\n";
}
